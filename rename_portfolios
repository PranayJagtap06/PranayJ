#!/usr/bin/env python3

import os
import re
import sys
from pathlib import Path
import argparse


def rename_files(directory: str, old_pattern: str, new_pattern: str):
    """
    Renames files in the specified directory that match the old pattern.
    
    :param directory: Path to the directory containing files to rename.
    :param old_pattern: The pattern to match in the old filenames.
    :param new_pattern: The pattern to replace in the new filenames.
    :param extension: File extension to match (e.g., 'txt').
    :param dry_run: If True, only print what would be done without actually renaming.
    """
    # try:
    #     count = 0
    #     for filename in os.listdir(directory):
            # print(filename)
            # if old_pattern in filename:
            #     count+=1
            #     old_file = os.path.join(directory, filename)
            #     new_file = os.path.join(directory, filename.replace(old_pattern, new_pattern))
            #     os.rename(old_file, new_file)
            #     print(f"Renamed: {filename} -> {filename.replace(old_pattern, new_pattern)}")
            #     print(count)
            
            # match = re.match(old_pattern, filename)
            # if match:
            #     count += 1
            #     old_file = os.path.join(directory, filename)
            #     number = int(match.group(1))
            #     new_filename = f"{new_pattern}{number + increment}.txt"
            #     new_file = os.path.join(directory, new_filename)
            #     os.rename(old_file, new_file)
            #     print(f"Renamed: {filename} -> {new_filename}")

    #         match = re.search(rf"{old_pattern}(\d+)\.md$", filename)
    #         if match:
    #             count += 1
    #             old_number = int(match.group(1))
    #             new_number = old_number + 1  # Increment the number
    #             old_file = os.path.join(directory, filename)
    #             new_file = os.path.join(directory, f"{new_pattern}{new_number}.md")
    #             os.rename(old_file, new_file)
    #             print(f"Renamed: {filename} -> {new_pattern}{new_number}.md")
    #     print(f"Total files renamed: {count}")
    # except FileNotFoundError:
    #     print(f"Error: Directory '{directory}' not found.")
    # except PermissionError:
    #     print(f"Error: Permission denied to access '{directory}'.")
    # except Exception as e:
    #     print(f"An error occurred: {e}")

    try:
        count = 0
        for file_path in directory.glob(f"*{old_pattern}*{extension}"):
            filename = file_path.name
            match = re.search(rf"{old_pattern}(\d+)\.{extension}$", filename)
            if match:
                count += 1
                old_number = int(match.group(1))
                new_number = old_number + 1  # Increment the number
                new_filename = f"{new_pattern}{new_number}.{extension}"
                new_file_path = file_path.with_name(new_filename)

                print(f"{'[DRY RUN] ' if dry_run else ''}Renaming: {filename} -> {new_filename}")
                
                if not dry_run:
                    file_path.rename(new_file_path)

        action = "Would rename" if dry_run else "Renamed"
        print(f"{action} a total of {count} file(s).")
    except FileNotFoundError:
        print(f"Error: Directory '{directory}' not found.")
    except PermissionError:
        print(f"Error: Permission denied to access '{directory}'.")
    except Exception as e:
        print(f"An error occurred: {e}")


def main():
    # if len(sys.argv) < 2:
    #     print("Usage: python script_name.py <directory_path> <old_name_pattern>")
    #     print("Example: python rename_files.py old_text /path/to/your/directory")
    #     sys.exit(1)

    # old_name_pattern = sys.argv[1]
    
    # if len(sys.argv) > 2:
    #     directory_path = sys.argv[2]
    #     # print("Number of arguments exceeded.\nExample: python rename_files.py /path/to/your/directory old_text")
    # else:
    #     directory_path = os.getcwd()

    # new_name_pattern = "portfolio-"


    # rename_files(directory_path, old_name_pattern, new_name_pattern)

    parser = argparse.ArgumentParser(description="Rename files with a specific pattern.")
    parser.add_argument("old_pattern", help="The pattern to match in old filenames.")
    parser.add_argument("new_pattern", help="The pattern to use in new filenames.")
    parser.add_argument("-d", "--directory", type=Path, default=Path.cwd(),
                        help="Path to the directory containing files to rename. Defaults to current working directory.")
    parser.add_argument("-e", "--extension", default="md",
                        help="File extension to match. Defaults to 'md'.")
    parser.add_argument("--dry-run", action="store_true",
                        help="Perform a dry run to see what would be renamed without actually renaming.")
    args = parser.parse_args()

    print(f"Working directory: {args.directory}")
    print(f"Old pattern: {args.old_pattern}")
    print(f"New pattern: {args.new_pattern}")
    print(f"File extension: {args.extension}")
    print(f"Dry run: {'Yes' if args.dry_run else 'No'}")

    # new_pattern = "portfolio-"
    rename_files(args.directory, args.old_pattern, args.new_pattern, args.extension, args.dry_run)



if __name__ == "__main__":
    main()